var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"Esercitazione0","ref":false,"files":[{"name":"Esercitazione0.c","type":"source","group":"model","path":"C:\\universita\\Meccatronica\\Esercitazioni_meccatronica\\Esercitazione1\\Esercitazione0_mbd_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: Esercitazione0.c\r\n *\r\n * Code generated for Simulink model 'Esercitazione0'.\r\n *\r\n * Model version                   : 1.6\r\n * Simulink Coder version          : 9.8 (R2022b) 13-May-2022\r\n * MBDT for S32K1xx Series Version : 4.3.0 (R2016a-R2022a) 13-Sep-2022\r\n * C/C++ source code generated on  : Tue Oct  1 18:01:12 2024\r\n *\r\n * Target selection: mbd_s32k.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"Esercitazione0.h\"\r\n#include \"rtwtypes.h\"\r\n#include \"Esercitazione0_private.h\"\r\n\r\n/* Block signals (default storage) */\r\nB_Esercitazione0_T Esercitazione0_B;\r\n\r\n/* Block states (default storage) */\r\nDW_Esercitazione0_T Esercitazione0_DW;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL_Esercitazione0_T Esercitazione0_M_;\r\nRT_MODEL_Esercitazione0_T *const Esercitazione0_M = &Esercitazione0_M_;\r\n\r\n/* Model step function */\r\nvoid Esercitazione0_step(void)\r\n{\r\n  int32_T rtb_PulseGenerator;\r\n  boolean_T rtb_LogicalOperator3;\r\n  boolean_T rtb_LogicalOperator_tmp;\r\n\r\n  /* S-Function (gpio_s32k_input): '<Root>/Digital_Input' */\r\n\r\n  /* GPIPORTC12 signal update */\r\n  Esercitazione0_B.Digital_Input = (PINS_DRV_ReadPins(PTC) >> 12) & 0x01;\r\n\r\n  /* S-Function (gpio_s32k_input): '<Root>/Digital_Input1' */\r\n\r\n  /* GPIPORTC13 signal update */\r\n  Esercitazione0_B.Digital_Input1 = (PINS_DRV_ReadPins(PTC) >> 13) & 0x01;\r\n\r\n  /* Logic: '<Root>/Logical Operator' incorporates:\r\n   *  Logic: '<Root>/Logical Operator3'\r\n   */\r\n  rtb_LogicalOperator_tmp = !Esercitazione0_B.Digital_Input;\r\n\r\n  /* DiscretePulseGenerator: '<Root>/Pulse Generator1' */\r\n  rtb_PulseGenerator = (Esercitazione0_DW.clockTickCounter < 1) &&\r\n    (Esercitazione0_DW.clockTickCounter >= 0) ? 5 : 0;\r\n  if (Esercitazione0_DW.clockTickCounter >= 4) {\r\n    Esercitazione0_DW.clockTickCounter = 0;\r\n  } else {\r\n    Esercitazione0_DW.clockTickCounter++;\r\n  }\r\n\r\n  /* End of DiscretePulseGenerator: '<Root>/Pulse Generator1' */\r\n\r\n  /* Logic: '<Root>/Logical Operator3' */\r\n  rtb_LogicalOperator3 = (rtb_LogicalOperator_tmp ||\r\n    (!Esercitazione0_B.Digital_Input1));\r\n\r\n  /* Logic: '<Root>/Logical Operator6' incorporates:\r\n   *  DataTypeConversion: '<Root>/Data Type Conversion1'\r\n   *  Logic: '<Root>/Logical Operator'\r\n   *  Logic: '<Root>/Logical Operator2'\r\n   */\r\n  Esercitazione0_B.LogicalOperator6 = (rtb_LogicalOperator3 &&\r\n    (rtb_LogicalOperator_tmp && (rtb_PulseGenerator != 0) &&\r\n     Esercitazione0_B.Digital_Input1));\r\n\r\n  /* DiscretePulseGenerator: '<Root>/Pulse Generator' */\r\n  rtb_PulseGenerator = (Esercitazione0_DW.clockTickCounter_i < 5) &&\r\n    (Esercitazione0_DW.clockTickCounter_i >= 0) ? 5 : 0;\r\n  if (Esercitazione0_DW.clockTickCounter_i >= 9) {\r\n    Esercitazione0_DW.clockTickCounter_i = 0;\r\n  } else {\r\n    Esercitazione0_DW.clockTickCounter_i++;\r\n  }\r\n\r\n  /* End of DiscretePulseGenerator: '<Root>/Pulse Generator' */\r\n\r\n  /* Logic: '<Root>/Logical Operator5' incorporates:\r\n   *  DataTypeConversion: '<Root>/Data Type Conversion'\r\n   *  Logic: '<Root>/Logical Operator'\r\n   *  Logic: '<Root>/Logical Operator1'\r\n   */\r\n  Esercitazione0_B.LogicalOperator5 = (rtb_LogicalOperator3 &&\r\n    (rtb_LogicalOperator_tmp && (rtb_PulseGenerator != 0)));\r\n\r\n  /* Logic: '<Root>/Logical Operator4' */\r\n  Esercitazione0_B.LogicalOperator4 = (Esercitazione0_B.Digital_Input &&\r\n    rtb_LogicalOperator3);\r\n\r\n  /* S-Function (gpio_s32k_output): '<Root>/Digital_Output' */\r\n\r\n  /* GPOPORTD16 Data Signal Update */\r\n  if (Esercitazione0_B.LogicalOperator4) {\r\n    PINS_DRV_SetPins(PTD, 1UL<<16);\r\n  } else {\r\n    PINS_DRV_ClearPins(PTD, 1UL<<16);\r\n  }\r\n\r\n  /* S-Function (gpio_s32k_output): '<Root>/Digital_Output1' */\r\n\r\n  /* GPOPORTD0 Data Signal Update */\r\n  if (Esercitazione0_B.LogicalOperator5) {\r\n    PINS_DRV_SetPins(PTD, 1UL<<0);\r\n  } else {\r\n    PINS_DRV_ClearPins(PTD, 1UL<<0);\r\n  }\r\n\r\n  /* S-Function (gpio_s32k_output): '<Root>/Digital_Output2' */\r\n\r\n  /* GPOPORTD15 Data Signal Update */\r\n  if (Esercitazione0_B.LogicalOperator6) {\r\n    PINS_DRV_SetPins(PTD, 1UL<<15);\r\n  } else {\r\n    PINS_DRV_ClearPins(PTD, 1UL<<15);\r\n  }\r\n}\r\n\r\n/* Model initialize function */\r\nvoid Esercitazione0_initialize(void)\r\n{\r\n  /* Start for S-Function (gpio_s32k_input): '<Root>/Digital_Input' */\r\n  {\r\n    /* Enable clock for PORTC */\r\n    PCC_SetClockMode(PCC, PCC_PORTC_CLOCK, true);\r\n\r\n    /* Configure the input port init structure. */\r\n    const pin_settings_config_t gpioPORTCPin12 = {\r\n      .base = PORTC,\r\n      .pinPortIdx = 12,\r\n      .pullConfig = PORT_INTERNAL_PULL_NOT_ENABLED,\r\n      .passiveFilter = false,\r\n      .driveSelect = PORT_LOW_DRIVE_STRENGTH,\r\n      .mux = PORT_MUX_AS_GPIO,\r\n      .pinLock = false,\r\n      .intConfig = PORT_DMA_INT_DISABLED,\r\n      .clearIntFlag = true,\r\n      .gpioBase = PTC,\r\n      .direction = GPIO_INPUT_DIRECTION,\r\n    };\r\n\r\n    /* Initialize GPIPORTC12. */\r\n    PINS_DRV_Init(1, &gpioPORTCPin12);\r\n  }\r\n\r\n  /* Start for S-Function (gpio_s32k_input): '<Root>/Digital_Input1' */\r\n  {\r\n    /* Enable clock for PORTC */\r\n    PCC_SetClockMode(PCC, PCC_PORTC_CLOCK, true);\r\n\r\n    /* Configure the input port init structure. */\r\n    const pin_settings_config_t gpioPORTCPin13 = {\r\n      .base = PORTC,\r\n      .pinPortIdx = 13,\r\n      .pullConfig = PORT_INTERNAL_PULL_NOT_ENABLED,\r\n      .passiveFilter = false,\r\n      .driveSelect = PORT_LOW_DRIVE_STRENGTH,\r\n      .mux = PORT_MUX_AS_GPIO,\r\n      .pinLock = false,\r\n      .intConfig = PORT_DMA_INT_DISABLED,\r\n      .clearIntFlag = true,\r\n      .gpioBase = PTC,\r\n      .direction = GPIO_INPUT_DIRECTION,\r\n    };\r\n\r\n    /* Initialize GPIPORTC13. */\r\n    PINS_DRV_Init(1, &gpioPORTCPin13);\r\n  }\r\n\r\n  /* Start for S-Function (gpio_s32k_output): '<Root>/Digital_Output' */\r\n  {\r\n    /* Enable clock for PORTD */\r\n    PCC_SetClockMode(PCC, PCC_PORTD_CLOCK, true);\r\n\r\n    /* Configure the output port init structure. */\r\n    const pin_settings_config_t gpioPORTDPin16 = {\r\n      .base = PORTD,\r\n      .pinPortIdx = 16,\r\n      .pullConfig = PORT_INTERNAL_PULL_NOT_ENABLED,\r\n      .passiveFilter = false,\r\n      .driveSelect = PORT_LOW_DRIVE_STRENGTH,\r\n      .mux = PORT_MUX_AS_GPIO,\r\n      .pinLock = false,\r\n      .intConfig = PORT_DMA_INT_DISABLED,\r\n      .clearIntFlag = true,\r\n      .gpioBase = PTD,\r\n      .direction = GPIO_OUTPUT_DIRECTION,\r\n      .initValue = 0U\r\n    };\r\n\r\n    /* Initialize GPIPORTD16. */\r\n    PINS_DRV_Init(1, &gpioPORTDPin16);\r\n  }\r\n\r\n  /* Start for S-Function (gpio_s32k_output): '<Root>/Digital_Output1' */\r\n  {\r\n    /* Enable clock for PORTD */\r\n    PCC_SetClockMode(PCC, PCC_PORTD_CLOCK, true);\r\n\r\n    /* Configure the output port init structure. */\r\n    const pin_settings_config_t gpioPORTDPin0 = {\r\n      .base = PORTD,\r\n      .pinPortIdx = 0,\r\n      .pullConfig = PORT_INTERNAL_PULL_NOT_ENABLED,\r\n      .passiveFilter = false,\r\n      .driveSelect = PORT_LOW_DRIVE_STRENGTH,\r\n      .mux = PORT_MUX_AS_GPIO,\r\n      .pinLock = false,\r\n      .intConfig = PORT_DMA_INT_DISABLED,\r\n      .clearIntFlag = true,\r\n      .gpioBase = PTD,\r\n      .direction = GPIO_OUTPUT_DIRECTION,\r\n      .initValue = 0U\r\n    };\r\n\r\n    /* Initialize GPIPORTD0. */\r\n    PINS_DRV_Init(1, &gpioPORTDPin0);\r\n  }\r\n\r\n  /* Start for S-Function (gpio_s32k_output): '<Root>/Digital_Output2' */\r\n  {\r\n    /* Enable clock for PORTD */\r\n    PCC_SetClockMode(PCC, PCC_PORTD_CLOCK, true);\r\n\r\n    /* Configure the output port init structure. */\r\n    const pin_settings_config_t gpioPORTDPin15 = {\r\n      .base = PORTD,\r\n      .pinPortIdx = 15,\r\n      .pullConfig = PORT_INTERNAL_PULL_NOT_ENABLED,\r\n      .passiveFilter = false,\r\n      .driveSelect = PORT_LOW_DRIVE_STRENGTH,\r\n      .mux = PORT_MUX_AS_GPIO,\r\n      .pinLock = false,\r\n      .intConfig = PORT_DMA_INT_DISABLED,\r\n      .clearIntFlag = true,\r\n      .gpioBase = PTD,\r\n      .direction = GPIO_OUTPUT_DIRECTION,\r\n      .initValue = 0U\r\n    };\r\n\r\n    /* Initialize GPIPORTD15. */\r\n    PINS_DRV_Init(1, &gpioPORTDPin15);\r\n  }\r\n}\r\n\r\n/* Model terminate function */\r\nvoid Esercitazione0_terminate(void)\r\n{\r\n  /* (no terminate code required) */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Esercitazione0.h","type":"header","group":"model","path":"C:\\universita\\Meccatronica\\Esercitazioni_meccatronica\\Esercitazione1\\Esercitazione0_mbd_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: Esercitazione0.h\r\n *\r\n * Code generated for Simulink model 'Esercitazione0'.\r\n *\r\n * Model version                   : 1.6\r\n * Simulink Coder version          : 9.8 (R2022b) 13-May-2022\r\n * MBDT for S32K1xx Series Version : 4.3.0 (R2016a-R2022a) 13-Sep-2022\r\n * C/C++ source code generated on  : Tue Oct  1 18:01:12 2024\r\n *\r\n * Target selection: mbd_s32k.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_Esercitazione0_h_\r\n#define RTW_HEADER_Esercitazione0_h_\r\n#ifndef Esercitazione0_COMMON_INCLUDES_\r\n#define Esercitazione0_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#include \"pcc_hw_access.h\"\r\n#include \"pins_driver.h\"\r\n#endif                                 /* Esercitazione0_COMMON_INCLUDES_ */\r\n\r\n#include \"Esercitazione0_types.h\"\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n/* Block signals (default storage) */\r\ntypedef struct {\r\n  boolean_T Digital_Input;             /* '<Root>/Digital_Input' */\r\n  boolean_T Digital_Input1;            /* '<Root>/Digital_Input1' */\r\n  boolean_T LogicalOperator6;          /* '<Root>/Logical Operator6' */\r\n  boolean_T LogicalOperator5;          /* '<Root>/Logical Operator5' */\r\n  boolean_T LogicalOperator4;          /* '<Root>/Logical Operator4' */\r\n} B_Esercitazione0_T;\r\n\r\n/* Block states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  int32_T clockTickCounter;            /* '<Root>/Pulse Generator1' */\r\n  int32_T clockTickCounter_i;          /* '<Root>/Pulse Generator' */\r\n} DW_Esercitazione0_T;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM_Esercitazione0_T {\r\n  const char_T * volatile errorStatus;\r\n};\r\n\r\n/* Block signals (default storage) */\r\nextern B_Esercitazione0_T Esercitazione0_B;\r\n\r\n/* Block states (default storage) */\r\nextern DW_Esercitazione0_T Esercitazione0_DW;\r\n\r\n/* Model entry point functions */\r\nextern void Esercitazione0_initialize(void);\r\nextern void Esercitazione0_step(void);\r\nextern void Esercitazione0_terminate(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL_Esercitazione0_T *const Esercitazione0_M;\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'Esercitazione0'\r\n */\r\n#endif                                 /* RTW_HEADER_Esercitazione0_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Esercitazione0_private.h","type":"header","group":"model","path":"C:\\universita\\Meccatronica\\Esercitazioni_meccatronica\\Esercitazione1\\Esercitazione0_mbd_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: Esercitazione0_private.h\r\n *\r\n * Code generated for Simulink model 'Esercitazione0'.\r\n *\r\n * Model version                   : 1.6\r\n * Simulink Coder version          : 9.8 (R2022b) 13-May-2022\r\n * MBDT for S32K1xx Series Version : 4.3.0 (R2016a-R2022a) 13-Sep-2022\r\n * C/C++ source code generated on  : Tue Oct  1 18:01:12 2024\r\n *\r\n * Target selection: mbd_s32k.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_Esercitazione0_private_h_\r\n#define RTW_HEADER_Esercitazione0_private_h_\r\n#include \"rtwtypes.h\"\r\n#include \"Esercitazione0_types.h\"\r\n#include \"Esercitazione0.h\"\r\n#if defined(__MWERKS__)\r\n\r\ndouble fmod (double x, double y);\r\ndouble fabs (double);\r\n\r\n#endif\r\n#endif                                /* RTW_HEADER_Esercitazione0_private_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"Esercitazione0_types.h","type":"header","group":"model","path":"C:\\universita\\Meccatronica\\Esercitazioni_meccatronica\\Esercitazione1\\Esercitazione0_mbd_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: Esercitazione0_types.h\r\n *\r\n * Code generated for Simulink model 'Esercitazione0'.\r\n *\r\n * Model version                   : 1.6\r\n * Simulink Coder version          : 9.8 (R2022b) 13-May-2022\r\n * MBDT for S32K1xx Series Version : 4.3.0 (R2016a-R2022a) 13-Sep-2022\r\n * C/C++ source code generated on  : Tue Oct  1 18:01:12 2024\r\n *\r\n * Target selection: mbd_s32k.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_Esercitazione0_types_h_\r\n#define RTW_HEADER_Esercitazione0_types_h_\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM_Esercitazione0_T RT_MODEL_Esercitazione0_T;\r\n\r\n#endif                                 /* RTW_HEADER_Esercitazione0_types_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"C:\\universita\\Meccatronica\\Esercitazioni_meccatronica\\Esercitazione1\\Esercitazione0_mbd_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'Esercitazione0'.\r\n *\r\n * Model version                   : 1.6\r\n * Simulink Coder version          : 9.8 (R2022b) 13-May-2022\r\n * MBDT for S32K1xx Series Version : 4.3.0 (R2016a-R2022a) 13-Sep-2022\r\n * C/C++ source code generated on  : Tue Oct  1 18:01:12 2024\r\n *\r\n * Target selection: mbd_s32k.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: ARM Compatible->ARM Cortex\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32\r\n *                       native word size:  32\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T.                        *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*===========================================================================*\r\n * Complex number type definitions                                           *\r\n *===========================================================================*/\r\n#define CREAL_T\r\n\r\ntypedef struct {\r\n  real32_T re;\r\n  real32_T im;\r\n} creal32_T;\r\n\r\ntypedef struct {\r\n  real64_T re;\r\n  real64_T im;\r\n} creal64_T;\r\n\r\ntypedef struct {\r\n  real_T re;\r\n  real_T im;\r\n} creal_T;\r\n\r\n#define CINT8_T\r\n\r\ntypedef struct {\r\n  int8_T re;\r\n  int8_T im;\r\n} cint8_T;\r\n\r\n#define CUINT8_T\r\n\r\ntypedef struct {\r\n  uint8_T re;\r\n  uint8_T im;\r\n} cuint8_T;\r\n\r\n#define CINT16_T\r\n\r\ntypedef struct {\r\n  int16_T re;\r\n  int16_T im;\r\n} cint16_T;\r\n\r\n#define CUINT16_T\r\n\r\ntypedef struct {\r\n  uint16_T re;\r\n  uint16_T im;\r\n} cuint16_T;\r\n\r\n#define CINT32_T\r\n\r\ntypedef struct {\r\n  int32_T re;\r\n  int32_T im;\r\n} cint32_T;\r\n\r\n#define CUINT32_T\r\n\r\ntypedef struct {\r\n  uint32_T re;\r\n  uint32_T im;\r\n} cuint32_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"mbd_main.c","type":"source","group":"","path":"C:\\universita\\Meccatronica\\Esercitazioni_meccatronica\\Esercitazione1\\Esercitazione0_mbd_rtw","tag":"","groupDisplay":"Other files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: mbd_main.c\r\n *\r\n * Code generated for Simulink model 'Esercitazione0'.\r\n *\r\n * Model version                   : 1.6\r\n * Simulink Coder version          : 9.8 (R2022b) 13-May-2022\r\n * MBDT for S32K1xx Series Version : 4.3.0 (R2016a-R2022a) 13-Sep-2022\r\n * C/C++ source code generated on  : Tue Oct  1 18:01:12 2024\r\n *\r\n * Target selection: mbd_s32k.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n/* Model's headers */\r\n#include \"device_registers.h\"\r\n#include \"Esercitazione0.h\"\r\n#include \"interrupt_manager.h\"\r\n#include \"clock_manager.h\"\r\n#include \"lpit_driver.h\"\r\n#include \"lpit_hw_access.h\"\r\n#include \"pcc_hw_access.h\"\r\n#include \"s32k_clock_init.h\"\r\n\r\nvoid SYSTEM_INIT_TASK(void)\r\n{\r\n  /* Initialize model */\r\n  Esercitazione0_initialize();\r\n}\r\n\r\nvoid SYSTEM_TASK(void)\r\n{\r\n  Esercitazione0_step();\r\n\r\n  /* Get model outputs here */\r\n}\r\n\r\nvoid LPIT0_Ch0_IRQHandler (void)\r\n{\r\n  SYSTEM_TASK();\r\n  LPIT_DRV_ClearInterruptFlagTimerChannels(0, (1 << 0));\r\n}\r\n\r\nvoid lpit0_init_step_timer()\r\n{\r\n  static const lpit_user_channel_config_t lpit0InitStruct = {\r\n    .timerMode = LPIT_PERIODIC_COUNTER,\r\n    .periodUnits = LPIT_PERIOD_UNITS_MICROSECONDS,\r\n    .period = 100000,\r\n    .triggerSource = LPIT_TRIGGER_SOURCE_INTERNAL,\r\n    .triggerSelect = 1U,\r\n    .enableReloadOnTrigger = false,\r\n    .enableStopOnInterrupt = false,\r\n    .enableStartOnTrigger = false,\r\n    .chainChannel = false,\r\n    .isInterruptEnabled = true\r\n  };\r\n\r\n  /* Initialize PIT timer channel. */\r\n  LPIT_DRV_InitChannel(0, 0, &lpit0InitStruct);\r\n\r\n  /* Set priority for LPIT ISR */\r\n  INT_SYS_SetPriority(LPIT0_Ch0_IRQn, 15);\r\n  INT_SYS_InstallHandler(LPIT0_Ch0_IRQn, LPIT0_Ch0_IRQHandler, (isr_t *)0);\r\n\r\n  /* Start the timer. */\r\n  LPIT_DRV_StartTimerChannels(0, LPIT0->SETTEN | (1 << 0));\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\r\n#ifdef __FPU_USED\r\n\r\n  /* FPU ENABLE */\r\n  /* Enable CP10 and CP11 coprocessors */\r\n  S32_SCB->CPACR |= (S32_SCB_CPACR_CP10_MASK | S32_SCB_CPACR_CP11_MASK);\r\n\r\n#endif\r\n\r\n  /* Disable all interrupts.*/\r\n  INT_SYS_DisableIRQGlobal();\r\n\r\n  /* Clock initialization */\r\n  Clock_Setup();\r\n\r\n  /* Initialize system timer clock */\r\n  lpit0_clock_init();\r\n\r\n  /* Initialize the processor. */\r\n  SYSTEM_INIT_TASK();\r\n\r\n  /* Enable all interrupts.*/\r\n  INT_SYS_EnableIRQGlobal();           /* interrupt_manager.c */\r\n\r\n  /* Initialize step timer interrupt. */\r\n  lpit0_init_step_timer();\r\n  while (1) {\r\n  }\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"s32k_clock_init.h","type":"header","group":"other","path":"C:\\universita\\Meccatronica\\Esercitazioni_meccatronica\\Esercitazione1\\Esercitazione0_mbd_rtw","tag":"","groupDisplay":"Other files","code":"#ifndef _S32K_CLOCK_INIT_H\r\n#define _S32K_CLOCK_INIT_H\r\n#include <stdint.h>\r\n#define XTAL_FREQ                      8000000UL\r\n#define CORE_CLK_FREQ                  80000000UL\r\n\r\nvoid Clock_Setup(void);\r\nvoid UpdateSystickConfig(uint32_t ticks);\r\nvoid lpit0_clock_init(void);\r\n\r\n#endif\r\n"}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":false,"showJustificationLinks":false,"showProfilingInfo":false,"showTaskSummary":false}};